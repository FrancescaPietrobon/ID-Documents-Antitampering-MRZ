#include <unordered_map>
#include <map>
#include <string>
#include <cstring>
#include <cctype>
#include <functional>
#include <algorithm>
#include <iostream>

std::unordered_map<unsigned, std::string> dictionary =   {{0, "0",},
                                                {1, "1",},
                                                {2, "2",},
                                                {3, "3",},
                                                {4, "4",},
                                                {5, "5",},
                                                {6, "6",},
                                                {7, "7",},
                                                {8, "8",},
                                                {9, "9",},
                                                {10, "A",},
                                                {11, "a",},
                                                {12, "B",},
                                                {13, "b",},
                                                {14, "C",},
                                                {15, "c",},
                                                {16, "D",},
                                                {17, "d",},
                                                {18, "E",},
                                                {19, "e",},
                                                {20, "F",},
                                                {21, "f",},
                                                {22, "G",},
                                                {23, "g",},
                                                {24, "H",},
                                                {25, "h",},
                                                {26, "I",},
                                                {27, "i",},
                                                {28, "J",},
                                                {29, "j",},
                                                {30, "K",},
                                                {31, "k",},
                                                {32, "L",},
                                                {33, "l",},
                                                {34, "M",},
                                                {35, "m",},
                                                {36, "N",},
                                                {37, "n",},
                                                {38, "O",},
                                                {39, "o",},
                                                {40, "P",},
                                                {41, "p",},
                                                {42, "Q",},
                                                {43, "q",},
                                                {44, "R",},
                                                {45, "r",},
                                                {46, "S",},
                                                {47, "s",},
                                                {48, "T",},
                                                {49, "t",},
                                                {50, "U",},
                                                {51, "u",},
                                                {52, "V",},
                                                {53, "v",},
                                                {54, "W",},
                                                {55, "w",},
                                                {56, "X",},
                                                {57, "x",},
                                                {58, "Y",},
                                                {59, "y",},
                                                {60, "Z",},
                                                {61, "z",},
                                                {62, "-",},
                                                {63, "/",},
                                                {64, "<",}};


template<typename K, typename V>
std::unordered_map<V, K> inverse_map(std::unordered_map<K, V> &map)
{
    std::unordered_map<V, K> inv;
    std::for_each(map.begin(), map.end(),
                [&inv] (const std::pair<K, V> &p) {
                    inv.insert(std::make_pair(p.second, p.first));
                });
    return inv;
}

std::unordered_map<std::string, unsigned> inverse_dictionary = inverse_map(dictionary);


std::unordered_map<char, unsigned> digit_conversion =  {{'<', 0,},
                                                        {'0', 0,},
                                                        {'1', 1,},
                                                        {'2', 2,},
                                                        {'3', 3,},
                                                        {'4', 4,},
                                                        {'5', 5,},
                                                        {'6', 6,},
                                                        {'7', 7,},
                                                        {'8', 8,},
                                                        {'9', 9,},
                                                        {'A', 10,},
                                                        {'B', 11,},
                                                        {'C', 12,},
                                                        {'D', 13,},
                                                        {'E', 14,},
                                                        {'F', 15,},
                                                        {'G', 16,},
                                                        {'H', 17,},
                                                        {'I', 18,},
                                                        {'J', 19,},
                                                        {'K', 20,},
                                                        {'L', 21,},
                                                        {'M', 22,},
                                                        {'N', 23,},
                                                        {'O', 24,},
                                                        {'P', 25,},
                                                        {'Q', 26,},
                                                        {'R', 27,},
                                                        {'S', 28,},
                                                        {'T', 29,},
                                                        {'U', 30,},
                                                        {'V', 31,},
                                                        {'W', 32,},
                                                        {'X', 33,},
                                                        {'Y', 34,},
                                                        {'Z', 35,}};


std::map<std::string, std::string> monthUCtoNum {
    {"JAN", "01"},
    {"FEB", "02"},
    {"MAR", "03"},
    {"APR", "04"},
    {"MAY", "05"},
    {"JUN", "06"},
    {"JUL", "07"},
    {"AUG", "08"},
    {"SEP", "09"},
    {"OCT", "10"},
    {"NOV", "11"},
    {"DEC", "12"}
};

std::map<std::string, std::string> monthLCtoNum {
    {"Jan", "01"},
    {"Feb", "02"},
    {"Mar", "03"},
    {"Apr", "04"},
    {"May", "05"},
    {"Jun", "06"},
    {"Jul", "07"},
    {"Aug", "08"},
    {"Sep", "09"},
    {"Oct", "10"},
    {"Nov", "11"},
    {"Dec", "12"}
};

/*
std::string a = "A";
std::string s = "avc";
std::string out;
std::transform( s.begin(), s.end(), std::back_inserter(out), (int (*)(int))std::toupper); // specific overload requested ); 

std::string s{"hello"};
std::transform(s.cbegin(), s.cend(),
                s.begin(), // write to the same location
                [](unsigned char c) { return std::toupper(c); });
                
std::cout << "s = " << quoted(s) << '\n';
*/

std::map<std::string, std::string> statesDic {
    {"AFG", "Afghanistan"},
    {"ALB", "Albania"},
    {"DZA", "Algeria"},
    {"ASM", "American Samoa"},
    {"AND", "Andorra"},
    {"AGO", "Angola"},
    {"AIA", "Anguilla"},
    {"ATA", "Antarctica"},
    {"ATG", "Antigua and Barbuda"},
    {"ARG", "Argentina"},
    {"ARM", "Armenia"},
    {"ABW", "Aruba"},
    {"AUS", "Australia"},
    {"AUT", "Austria"},
    {"AZE", "Azerbaijan"},
    {"BHS", "Bahamas"},
    {"BHR", "Bahrain"},
    {"BGD", "Bangladesh"},
    {"BRB", "Barbados"},
    {"BLR", "Belarus"},
    {"BEL", "Belgium"},
    {"BLZ", "Belize"},
    {"BEN", "Benin"},
    {"BMU", "Bermuda"},
    {"BTN", "Bhutan"},
    {"BOL", "Bolivia"},
    {"BIH", "Bosnia and Herzegovina"},
    {"BWA", "Botswana"},
    {"BVT", "Bouvet Island"},
    {"BRA", "Brazil"},
    {"IOT", "British Indian Ocean Territory"},
    {"BRN", "Brunei Darussalam"},
    {"BGR", "Bulgaria"},
    {"BFA", "Burkina Faso"},
    {"BDI", "Burundi"},
    {"KHM", "Cambodia"},
    {"CMR", "Cameroon"},
    {"CAN", "Canada"},
    {"CPV", "Cape Verde"},
    {"CYM", "Cayman Islands"},
    {"CAF", "Central African Republic"},
    {"TCD", "Chad"},
    {"CHL", "Chile"},
    {"CHN", "China"},
    {"CXR", "Christmas Island"},
    {"CCK", "Cocos (Keeling) Islands"},
    {"COL", "Colombia"},
    {"COM", "Comoros"},
    {"COG", "Congo"},
    {"COK", "Cook Islands"},
    {"CRI", "Costa Rica"},
    {"CIV", "CÃ´te d'Ivoire"},
    {"HRV", "Croatia"},
    {"CUB", "Cuba"},
    {"CYP", "Cyprus"},
    {"CZE", "Czech Republic"},
    {"PRK", "Democratic People's Republic of Korea"},
    {"COD", "Democratic Republic of the Congo"},
    {"DNK", "Denmark"},
    {"DJI", "Djibouti"},
    {"DMA", "Dominica"},
    {"DOM", "Dominican Republic"},
    {"TMP", "East Timor"},
    {"ECU", "Ecuador"},
    {"EGY", "Egypt"},
    {"SLV", "El Salvador"},
    {"GNQ", "Equatorial Guinea"},
    {"ERI", "Eritrea"},
    {"EST", "Estonia"},
    {"ETH", "Ethiopia"},
    {"FLK", "Falkland Islands (Malvinas)"},
    {"FRO", "Faeroe Islands"},
    {"FJI", "Fiji"},
    {"FIN", "Finland"},
    {"FRA", "France"},
    {"FXX", "France, Metropolitan"},
    {"GUF", "French Guiana"},
    {"PYF", "French Polynesia"},
    {"GAB", "Gabon"},
    {"GMB", "Gambia"},
    {"GEO", "Georgia"},
    {"D", "Germany"},
    {"GHA", "Ghana"},
    {"GIB", "Gibraltar"},
    {"GRC", "Greece"},
    {"GRL", "Greenland"},
    {"GRD", "Grenada"},
    {"GLP", "Guadeloupe"},
    {"GUM", "Guam"},
    {"GTM", "Guatemala"},
    {"GIN", "Guinea"},
    {"GNB", "Guinea-Bissau"},
    {"GUY", "Guyana"},
    {"HTI", "Haiti"},
    {"HMD", "Heard and McDonald Islands"},
    {"VAT", "Holy See (Vatican City State)"},
    {"HND", "Honduras"},
    {"HKG", "Hong Kong"},
    {"HUN", "Hungary"},
    {"ISL", "Iceland"},
    {"IND", "India"},
    {"IDN", "Indonesia"},
    {"IRN", "Iran, Islamic Republic of"},
    {"IRQ", "Iraq"},
    {"IRL", "Ireland"},
    {"ISR", "Israel"},
    {"ITA", "Italy"},
    {"JAM", "Jamaica"},
    {"JPN", "Japan"},
    {"JOR", "Jordan"},
    {"KAZ", "Kazakhstan"},
    {"KEN", "Kenya"},
    {"KIR", "Kiribati"},
    {"KWT", "Kuwait"},
    {"KGZ", "Kyrgyzstan"},
    {"LAO", "Lao People's Democratic Republic"},
    {"LVA", "Latvia"},
    {"LBN", "Lebanon"},
    {"LSO", "Lesotho"},
    {"LBR", "Liberia"},
    {"LBY", "Libyan Arab Jamahiriya"},
    {"LIE", "Liechtenstein"},
    {"LTU", "Lithuania"},
    {"LUX", "Luxembourg"},
    {"MDG", "Madagascar"},
    {"MWI", "Malawi"},
    {"MYS", "Malaysia"},
    {"MDV", "Maldives"},
    {"MLI", "Mali"},
    {"MLT", "Malta"},
    {"MHL", "Marshall Islands"},
    {"MTQ", "Martinique"},
    {"MRT", "Mauritania"},
    {"MUS", "Mauritius"},
    {"MYT", "Mayotte"},
    {"MEX", "Mexico"},
    {"FSM", "Micronesia, Federated States of"},
    {"MCO", "Monaco"},
    {"MNG", "Mongolia"},
    {"MSR", "Montserrat"},
    {"MAR", "Morocco"},
    {"MOZ", "Mozambique"},
    {"MMR", "Myanmar"},
    {"NAM", "Namibia"},
    {"NRU", "Nauru"},
    {"NPL", "Nepal"},
    {"NLD", "Netherlands, Kingdom of the"},
    {"ANT", "Netherlands Antilles"},
    {"NTZ", "Neutral Zone"},
    {"NCL", "New Caledonia"},
    {"NZL", "New Zealand"},
    {"NIC", "Nicaragua"},
    {"NER", "Niger"},
    {"NGA", "Nigeria"},
    {"NIU", "Niue"},
    {"NFK", "Norfolk Island"},
    {"MNP", "Northern Mariana Islands"},
    {"NOR", "Norway"},
    {"OMN", "Oman"},
    {"PAK", "Pakistan"},
    {"PLW", "Palau"},
    {"PAN", "Panama"},
    {"PNG", "Papua New Guinea"},
    {"PRY", "Paraguay"},
    {"PER", "Peru"},
    {"PHL", "Philippines"},
    {"PCN", "Pitcairn"},
    {"POL", "Poland"},
    {"PRT", "Portugal"},
    {"PRI", "Puerto Rico"},
    {"QAT", "Qatar"},
    {"KOR", "Republic of Korea"},
    {"MDA", "Republic of Moldova"},
    {"REU", "RÃ©union"},
    {"ROM", "Romania"},
    {"RUS", "Russian Federation"},
    {"RWA", "Rwanda"},
    {"SHN", "Saint Helena"},
    {"KNA", "Saint Kitts and Nevis"},
    {"LCA", "Saint Lucia"},
    {"SPM", "Saint Pierre and Miquelon"},
    {"VCT", "Saint Vincent and the Grenadines"},
    {"WSM", "Samoa"},
    {"SMR", "San Marino"},
    {"STP", "Sao Tome and Principe"},
    {"SAU", "Saudi Arabia"},
    {"SEN", "Senegal"},
    {"SYC", "Seychelles"},
    {"SLE", "Sierra Leone"},
    {"SGP", "Singapore"},
    {"SVK", "Slovakia"},
    {"SVN", "Slovenia"},
    {"SLB", "Solomon Islands"},
    {"SOM", "Somalia"},
    {"ZAF", "South Africa"},
    {"SGS", "South Georgia and the South Sandwich Island"},
    {"ESP", "Spain"},
    {"LKA", "Sri Lanka"},
    {"SDN", "Sudan"},
    {"SUR", "Suriname"},
    {"SJM", "Svalbard and Jan Mayen Islands"},
    {"SWZ", "Swaziland"},
    {"SWE", "Sweden"},
    {"CHE", "Switzerland"},
    {"SYR", "Syrian Arab Republic"},
    {"TWN", "Taiwan Province of China"},
    {"TJK", "Tajikistan"},
    {"THA", "Thailand"},
    {"MKD", "The former Yugoslav Republic of Macedonia"},
    {"TGO", "Togo"},
    {"TKL", "Tokelau"},
    {"TON", "Tonga"},
    {"TTO", "Trinidad and Tobago"},
    {"TUN", "Tunisia"},
    {"TUR", "Turkey"},
    {"TKM", "Turkmenistan"},
    {"TCA", "Turks and Caicos Islands"},
    {"TUV", "Tuvalu"},
    {"UGA", "Uganda"},
    {"UKR", "Ukraine"},
    {"ARE", "United Arab Emirates"},
    {"GBR", "United Kingdom of Great Britain and Northern Ireland Citizen"},
    {"GBD", "United Kingdom of Great Britain and Northern Ireland Dependent territories citizen"},
    {"GBN", "United Kingdom of Great Britain and Northern Ireland National (overseas)"},
    {"GBO", "United Kingdom of Great Britain and Northern Ireland Overseas citizen"},
    {"GBP", "United Kingdom of Great Britain and Northern Ireland Protected Person"},
    {"GBS", "United Kingdom of Great Britain and Northern Ireland Subject"},
    {"TZA", "United Republic of Tanzania"},
    {"USA", "United States of America"},
    {"UMI", "United States of America Minor Outlying Islands"},
    {"URY", "Uruguay"},
    {"UZB", "Uzbekistan"},
    {"VUT", "Vanuatu"},
    {"VEN", "Venezuela"},
    {"VNM", "Viet Nam"},
    {"VGB", "Virgin Islands (Great Britian)"},
    {"VIR", "Virgin Islands (United States)"},
    {"WLF", "Wallis and Futuna Islands"},
    {"ESH", "Western Sahara"},
    {"YEM", "Yemen"},
    {"ZAR", "Zaire"},
    {"ZMB", "Zambia"},
    {"ZWE", "Zimbabwe"},
    {"UNO", "United Nations Organization"},
    {"UNA", "United Nations specialized agency official"},
    {"XXA", "Stateless"},
    {"XXB", "Refugee"},
    {"XXC", "Refugee (non-convention)"},
    {"XXX", "Unspecified / Unknown"}
};






enum monthUpperCase
{
    JAN = 1,
    FEB,
    MAR,
    APR,
    MAY,
    JUN,
    JUL,
    AUG,
    SEP,
    OCT,
    NOV,
    DEC
};

enum monthLowerCase
{
    Jan = 1,
    Feb,
    Mar,
    Apr,
    May,
    Jun,
    Jul,
    Aug,
    Sep,
    Oct,
    Nov,
    Dec
};


std::map<monthUpperCase, std::string> monthUpperCaseMap {
    {JAN, "JAN"},
    {FEB, "FEB"},
    {MAR, "MAR"},
    {APR, "APR"},
    {MAY, "MAY"},
    {JUN, "JUN"},
    {JUL, "JUL"},
    {AUG, "AUG"},
    {SEP, "SEP"},
    {OCT, "OCT"},
    {NOV, "NOV"},
    {DEC, "DEC"}
};

std::map<monthLowerCase, std::string> monthLowerCaseMap {
    {Jan, "Jan"},
    {Feb, "Feb"},
    {Mar, "Mar"},
    {Apr, "Apr"},
    {May, "May"},
    {Jun, "Jun"},
    {Jul, "Jul"},
    {Aug, "Aug"},
    {Sep, "Sep"},
    {Oct, "Oct"},
    {Nov, "Nov"},
    {Dec, "Dec"}
};
                                